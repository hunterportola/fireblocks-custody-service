import { Request, Response, NextFunction } from 'express';
import { AuthenticationError, AuthorizationError } from './error-handler';

export interface LenderInfo {
  lenderId: string;
  apiKeyId: string;
  permissions: string[];
  turnkeySubOrgId?: string;
}

declare global {
  // eslint-disable-next-line @typescript-eslint/no-namespace
  namespace Express {
    interface Request {
      lender: LenderInfo;
    }
  }
}

// Mock lender database - replace with real database
const MOCK_LENDERS: Record<string, LenderInfo> = {
  'lender_acme_corp_api_key_xyz123': {
    lenderId: 'lender_acme_corp',
    apiKeyId: 'lender_acme_corp_api_key_xyz123',
    permissions: ['disbursements:create', 'disbursements:read', 'wallets:read', 'lenders:read', 'lenders:update'],
    turnkeySubOrgId: 'sub_org_acme_12345',
  },
  'lender_demo_api_key_abc789': {
    lenderId: 'lender_demo',
    apiKeyId: 'lender_demo_api_key_abc789',
    permissions: ['disbursements:create', 'disbursements:read', 'wallets:read', 'lenders:read', 'lenders:update'],
    turnkeySubOrgId: 'sub_org_demo_67890',
  },
  // Test originators generated by provision-test-originators.ts
  'originator_acme_lending_api_key_5u55s56j9n8': {
    lenderId: 'lender_originator_acme_lending_primary',
    apiKeyId: 'originator_acme_lending_api_key_5u55s56j9n8',
    permissions: ["disbursements:create","disbursements:read","wallets:read","lenders:read","lenders:update"],
    turnkeySubOrgId: 'sub_org_originator_acme_lending_1761521069201',
  },
  'originator_acme_lending_api_key_j6sr17au72d': {
    lenderId: 'lender_originator_acme_lending_secondary',
    apiKeyId: 'originator_acme_lending_api_key_j6sr17au72d',
    permissions: ["disbursements:read","wallets:read","lenders:read"],
    turnkeySubOrgId: 'sub_org_originator_acme_lending_1761521069201',
  },
  'originator_stellar_loans_api_key_ue162vf99l9': {
    lenderId: 'lender_originator_stellar_loans_primary',
    apiKeyId: 'originator_stellar_loans_api_key_ue162vf99l9',
    permissions: ["disbursements:create","disbursements:read","wallets:read","lenders:read","lenders:update"],
    turnkeySubOrgId: 'sub_org_originator_stellar_loans_1761521069201',
  },
  'originator_stellar_loans_api_key_76cxhjcsot9': {
    lenderId: 'lender_originator_stellar_loans_secondary',
    apiKeyId: 'originator_stellar_loans_api_key_76cxhjcsot9',
    permissions: ["disbursements:read","wallets:read","lenders:read"],
    turnkeySubOrgId: 'sub_org_originator_stellar_loans_1761521069201',
  },
};

export function lenderAuth(req: Request, _res: Response, next: NextFunction): void {
  try {
    const authHeader = req.headers.authorization;
    
    if (authHeader == null || authHeader.trim() === '') {
      throw new AuthenticationError('Authorization header required');
    }

    if (!authHeader.startsWith('Bearer ')) {
      throw new AuthenticationError('Invalid authorization format. Use: Bearer <api_key>');
    }

    const apiKey = authHeader.substring(7); // Remove 'Bearer ' prefix

    if (!apiKey || apiKey.trim() === '') {
      throw new AuthenticationError('API key is required');
    }

    // Look up lender by API key
    // eslint-disable-next-line security/detect-object-injection
    const lender = MOCK_LENDERS[apiKey];
    if (lender == null) {
      throw new AuthenticationError('Invalid API key');
    }

    // Add lender info to request
    req.lender = lender;
    req.context.lenderId = lender.lenderId;

    // Log authentication for security auditing
    // eslint-disable-next-line no-console
    console.log(`🔐 [${req.context.requestId}] Authenticated lender: ${lender.lenderId}`);

    next();
  } catch (error) {
    next(error);
  }
}

export function requirePermission(permission: string) {
  return (req: Request, _res: Response, next: NextFunction): void => {
    try {
      if (req.lender == null) {
        throw new AuthenticationError('Authentication required');
      }

      if (!req.lender.permissions.includes(permission)) {
        throw new AuthorizationError(`Permission '${permission}' required`);
      }

      next();
    } catch (error) {
      next(error);
    }
  };
}